/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package rocks.blackcat.vcl;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static rocks.blackcat.vcl.psi.VCLTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>VCL.flex</tt>
 */
class VCLLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INLINE_C = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\10\0\1\16\1\3\1\2\3\1\22\0\1\3\1\24\1\15\1\5\1\0\1\24\1\25\1\17\1\35\1\36"+
    "\1\23\1\33\1\41\1\32\1\7\1\4\12\6\1\0\1\34\1\27\1\26\1\30\2\0\2\21\1\60\27"+
    "\21\1\0\1\20\2\0\1\22\1\0\1\44\1\43\1\45\1\13\1\47\1\57\1\21\1\12\1\53\1\21"+
    "\1\51\1\46\1\10\1\52\1\55\1\54\1\21\1\56\1\11\1\50\1\42\1\21\1\14\1\21\1\12"+
    "\1\21\1\37\1\31\1\40\1\24\6\0\1\1\32\0\1\3\337\0\1\3\177\0\13\3\35\0\2\1\5"+
    "\0\1\3\57\0\1\3\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\2\7"+
    "\2\1\3\3\1\10\2\3\1\1\1\3\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\10\7\2\17\1\0\1\5"+
    "\2\20\2\7\1\0\1\21\5\0\1\22\7\7\1\23"+
    "\1\7\1\24\1\25\1\0\1\26\1\27\2\0\2\7"+
    "\1\30\1\7\1\31\3\7\1\32\2\0\2\7\1\33"+
    "\3\7\2\0\1\34\5\7\2\0\1\7\1\35\1\36"+
    "\1\7\1\37\2\0\1\40\1\41\7\0\1\42";

  private static int [] zzUnpackAction() {
    int [] result = new int[110];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\142"+
    "\0\u0157\0\u0188\0\u01b9\0\u01ea\0\u021b\0\142\0\u024c\0\u021b"+
    "\0\u027d\0\u02ae\0\u02df\0\u0310\0\142\0\142\0\142\0\142"+
    "\0\u0341\0\142\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436\0\u0467"+
    "\0\u0498\0\u04c9\0\142\0\u04fa\0\u052b\0\u055c\0\u058d\0\142"+
    "\0\u05be\0\u05ef\0\u0620\0\142\0\u0651\0\u0682\0\u01ea\0\u06b3"+
    "\0\u06e4\0\142\0\u0715\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u080a"+
    "\0\u083b\0\u0157\0\u086c\0\142\0\142\0\u089d\0\u0157\0\u0157"+
    "\0\u08ce\0\u021b\0\u08ff\0\u0930\0\u0157\0\u0961\0\u0157\0\u0992"+
    "\0\u09c3\0\u09f4\0\142\0\u0a25\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9"+
    "\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\u0157\0\u0c0f\0\u0c40"+
    "\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04\0\u0d35\0\u0d66\0\u0157\0\u0157"+
    "\0\u0d97\0\u0157\0\u0dc8\0\u0df9\0\u0157\0\u0157\0\u0e2a\0\u0e5b"+
    "\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\142";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[110];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\3\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\3\11\1\13\1\3\1\14\1\3\1\11\1\3\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\15\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\2\11\1\36\2\11\1\37\1\40\2\11\1\41"+
    "\1\11\1\42\1\43\1\3\36\43\1\44\20\43\62\0"+
    "\3\4\61\0\1\6\16\0\1\45\35\0\1\6\2\0"+
    "\56\6\6\0\1\7\1\46\1\47\4\50\52\0\1\11"+
    "\1\0\5\11\4\0\2\11\7\0\1\11\7\0\17\11"+
    "\6\0\1\11\1\0\5\11\4\0\2\11\7\0\1\11"+
    "\7\0\1\51\4\11\1\52\11\11\15\53\1\54\1\55"+
    "\1\53\1\56\40\53\17\57\1\54\1\60\40\57\26\0"+
    "\1\16\57\0\1\16\61\0\2\16\57\0\1\16\1\0"+
    "\1\16\61\0\1\16\55\0\1\61\112\0\1\62\6\0"+
    "\1\11\1\0\5\11\4\0\2\11\7\0\1\11\7\0"+
    "\10\11\1\63\6\11\6\0\1\11\1\0\5\11\4\0"+
    "\2\11\7\0\1\11\7\0\2\11\1\64\14\11\6\0"+
    "\1\11\1\0\5\11\4\0\2\11\7\0\1\11\7\0"+
    "\3\11\1\65\13\11\6\0\1\11\1\0\5\11\4\0"+
    "\2\11\7\0\1\11\7\0\4\11\1\66\12\11\6\0"+
    "\1\11\1\0\5\11\4\0\2\11\7\0\1\11\7\0"+
    "\5\11\1\67\11\11\6\0\1\11\1\0\1\70\4\11"+
    "\4\0\2\11\7\0\1\11\7\0\10\11\1\71\4\11"+
    "\1\72\1\11\6\0\1\11\1\0\5\11\4\0\2\11"+
    "\7\0\1\11\7\0\5\11\1\73\11\11\6\0\1\11"+
    "\1\0\5\11\4\0\2\11\7\0\1\11\4\0\1\74"+
    "\2\0\17\11\60\0\1\75\23\45\1\76\35\45\6\0"+
    "\1\46\1\0\1\47\4\50\55\0\1\50\55\0\1\11"+
    "\1\0\5\11\4\0\2\11\7\0\1\11\7\0\1\11"+
    "\1\77\15\11\6\0\1\11\1\0\5\11\4\0\2\11"+
    "\7\0\1\11\7\0\6\11\1\100\10\11\15\53\1\54"+
    "\2\53\1\56\46\53\1\101\6\53\1\54\2\53\1\56"+
    "\41\53\2\0\56\53\1\57\2\0\56\57\4\0\1\102"+
    "\62\0\1\11\1\0\1\11\1\103\3\11\4\0\2\11"+
    "\7\0\1\11\7\0\17\11\6\0\1\11\1\0\5\11"+
    "\4\0\2\11\7\0\1\11\7\0\3\11\1\104\13\11"+
    "\6\0\1\11\1\0\5\11\4\0\2\11\7\0\1\11"+
    "\7\0\4\11\1\105\12\11\6\0\1\11\1\0\1\11"+
    "\1\106\3\11\4\0\2\11\7\0\1\11\7\0\17\11"+
    "\6\0\1\11\1\0\4\11\1\107\4\0\2\11\7\0"+
    "\1\11\7\0\17\11\6\0\1\11\1\0\5\11\4\0"+
    "\2\11\7\0\1\11\7\0\12\11\1\110\4\11\6\0"+
    "\1\11\1\0\5\11\4\0\2\11\7\0\1\11\7\0"+
    "\3\11\1\111\13\11\6\0\1\11\1\0\5\11\4\0"+
    "\2\11\7\0\1\11\7\0\6\11\1\112\10\11\4\45"+
    "\1\113\16\45\1\76\35\45\6\53\1\114\1\115\5\53"+
    "\1\54\2\53\1\56\40\53\6\0\1\11\1\0\5\11"+
    "\4\0\2\11\7\0\1\11\7\0\5\11\1\116\11\11"+
    "\6\0\1\11\1\0\5\11\4\0\2\11\7\0\1\11"+
    "\7\0\7\11\1\117\7\11\6\0\1\11\1\0\5\11"+
    "\4\0\2\11\7\0\1\11\7\0\5\11\1\120\11\11"+
    "\6\0\1\11\1\0\5\11\4\0\2\11\7\0\1\11"+
    "\7\0\13\11\1\121\3\11\6\0\1\11\1\0\5\11"+
    "\4\0\2\11\7\0\1\11\7\0\4\11\1\122\12\11"+
    "\6\0\1\11\1\0\5\11\4\0\2\11\7\0\1\11"+
    "\7\0\1\123\16\11\6\53\1\124\1\115\5\53\1\54"+
    "\2\53\1\56\46\53\1\125\6\53\1\54\2\53\1\56"+
    "\40\53\6\0\1\11\1\0\5\11\4\0\2\11\7\0"+
    "\1\11\7\0\6\11\1\126\10\11\6\0\1\11\1\0"+
    "\5\11\4\0\2\11\7\0\1\11\7\0\5\11\1\127"+
    "\11\11\6\0\1\11\1\0\5\11\4\0\2\11\7\0"+
    "\1\11\7\0\11\11\1\130\5\11\6\0\1\11\1\0"+
    "\5\11\4\0\2\11\7\0\1\11\7\0\14\11\1\131"+
    "\2\11\6\0\1\11\1\0\5\11\4\0\2\11\7\0"+
    "\1\11\7\0\1\132\16\11\6\0\1\11\1\0\5\11"+
    "\4\0\2\11\7\0\1\11\7\0\14\11\1\133\2\11"+
    "\7\53\1\115\5\53\1\54\2\53\1\56\46\53\1\134"+
    "\1\135\5\53\1\54\2\53\1\56\40\53\6\0\1\11"+
    "\1\0\5\11\4\0\2\11\7\0\1\11\7\0\10\11"+
    "\1\136\6\11\6\0\1\11\1\0\5\11\4\0\2\11"+
    "\7\0\1\11\7\0\15\11\1\137\1\11\6\0\1\11"+
    "\1\0\5\11\4\0\2\11\7\0\1\11\7\0\6\11"+
    "\1\140\10\11\6\0\1\11\1\0\3\11\1\141\1\11"+
    "\4\0\2\11\7\0\1\11\7\0\17\11\6\0\1\11"+
    "\1\0\5\11\4\0\2\11\7\0\1\11\7\0\10\11"+
    "\1\142\6\11\6\53\1\143\1\135\5\53\1\54\2\53"+
    "\1\56\46\53\1\144\6\53\1\54\2\53\1\56\40\53"+
    "\6\0\1\11\1\0\3\11\1\145\1\11\4\0\2\11"+
    "\7\0\1\11\7\0\17\11\6\0\1\11\1\0\5\11"+
    "\4\0\2\11\7\0\1\11\7\0\5\11\1\146\11\11"+
    "\7\53\1\135\5\53\1\54\2\53\1\56\46\53\1\147"+
    "\1\150\5\53\1\54\2\53\1\56\46\53\1\151\1\150"+
    "\5\53\1\54\2\53\1\56\46\53\1\152\6\53\1\54"+
    "\2\53\1\56\47\53\1\150\5\53\1\54\2\53\1\56"+
    "\46\53\1\153\6\53\1\54\1\154\1\53\1\56\46\53"+
    "\1\155\6\53\1\54\1\154\1\53\1\56\55\53\1\156"+
    "\2\53\1\56\55\53\1\54\1\154\1\53\1\56\40\53";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3969];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\4\1\1\11\5\1\1\11\6\1\4\11"+
    "\1\1\1\11\10\1\1\11\1\1\1\0\2\1\1\11"+
    "\2\1\1\0\1\11\5\0\1\11\11\1\2\11\1\0"+
    "\2\1\2\0\10\1\1\11\2\0\6\1\2\0\6\1"+
    "\2\0\5\1\2\0\2\1\7\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[110];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  private int c_start;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  VCLLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            }
          case 35: break;
          case 2: 
            { return WHITE_SPACE;
            }
          case 36: break;
          case 3: 
            { return OPERATOR;
            }
          case 37: break;
          case 4: 
            { return LINE_COMMENT;
            }
          case 38: break;
          case 5: 
            { return NUMBER;
            }
          case 39: break;
          case 6: 
            { return DOT;
            }
          case 40: break;
          case 7: 
            { return IDENTIFIER;
            }
          case 41: break;
          case 8: 
            { return EQ;
            }
          case 42: break;
          case 9: 
            { return SEMI;
            }
          case 43: break;
          case 10: 
            { return LP;
            }
          case 44: break;
          case 11: 
            { return RP;
            }
          case 45: break;
          case 12: 
            { return LC;
            }
          case 46: break;
          case 13: 
            { return RC;
            }
          case 47: break;
          case 14: 
            { return COMMA;
            }
          case 48: break;
          case 15: 
            { 
            }
          case 49: break;
          case 16: 
            { return DURATION;
            }
          case 50: break;
          case 17: 
            { return STRING;
            }
          case 51: break;
          case 18: 
            { return R_CBRACE;
            }
          case 52: break;
          case 19: 
            { return KEYWORD_IF;
            }
          case 53: break;
          case 20: 
            { yybegin(INLINE_C); c_start = getTokenStart()+2; return L_CBRACE;
            }
          case 54: break;
          case 21: 
            { yybegin(YYINITIAL); yypushback(2); zzStartRead = c_start; return C_CONTENT;
            }
          case 55: break;
          case 22: 
            { return KEYWORD_SUB;
            }
          case 56: break;
          case 23: 
            { return KEYWORD_SET;
            }
          case 57: break;
          case 24: 
            { return KEYWORD_ACL;
            }
          case 58: break;
          case 25: 
            { return KEYWORD_NEW;
            }
          case 59: break;
          case 26: 
            { return BLOCK_COMMENT;
            }
          case 60: break;
          case 27: 
            { return KEYWORD_ELSE;
            }
          case 61: break;
          case 28: 
            { return KEYWORD_UNSET;
            }
          case 62: break;
          case 29: 
            { return KEYWORD_ELSEIF;
            }
          case 63: break;
          case 30: 
            { return KEYWORD_IMPORT;
            }
          case 64: break;
          case 31: 
            { return KEYWORD_RETURN;
            }
          case 65: break;
          case 32: 
            { return KEYWORD_BACKEND;
            }
          case 66: break;
          case 33: 
            { return KEYWORD_INCLUDE;
            }
          case 67: break;
          case 34: 
            { return IP;
            }
          case 68: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
