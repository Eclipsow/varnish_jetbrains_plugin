/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.4.1/userguide/tutorial_java_projects.html
 */


plugins {
  id "org.jetbrains.intellij" version "0.3.9"
  id "jacoco"
  id 'com.github.kt3k.coveralls' version '2.8.2'
  id "org.jetbrains.grammarkit" version "2018.1.7"
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.2'
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'org.jetbrains.intellij'
apply plugin: 'idea'
apply plugin: 'org.jetbrains.grammarkit'

import org.jetbrains.grammarkit.tasks.*

task generateVCLLexer(type: GenerateLexer) {
    // source flex file
    source = "src/rocks/blackcat/vcl/VCL.flex"

    // target directory for lexer
    targetDir = "gen/rocks/blackcat/vcl"

    // target classname, target file will be targetDir/targetClass.java
    targetClass = "VCLLexer"

    // if set, plugin will remove a lexer output file before generating new one. Default: false
    purgeOldFiles = true
}

task generateVCLParser(type: GenerateParser) {
    //This doesn't seem to work as I want it to so force
    outputs.upToDateWhen { false }

    // source bnf file
    source = "src/rocks/blackcat/vcl/VCL.bnf"

    // optional, task-specific root for the generated files. Default: none
    targetRoot = "gen"

    // path to a parser file, relative to the targetRoot
    pathToParser = 'gen/rocks/blackcat/parser/VCLParser.java'

    // path to a directory with generated psi files, relative to the targetRoot
    pathToPsiRoot = 'gen/rocks/blackcat/vcl/psi'

    // if set, plugin will remove a parser output file and psi output directory before generating new ones. Default: false
    purgeOldFiles = true
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

sourceSets {
    //noinspection GroovyAssignabilityCheck
    main {
        java.srcDirs = ['src', 'gen']
        resources.srcDirs = ['resources']
    }
    test {
        java.srcDirs = ['tests']
        resources.srcDirs = ['testData']
    }
}

/*
// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
}
*/

test {
  testLogging.showStandardStreams = true
}


compileJava {
    dependsOn generateVCLLexer
    dependsOn generateVCLParser
}